@using Flurl.Http;
@using ShikkhanobishBlazor.Models
@using System.Globalization
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@page "/RndNumGenerator"



<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="Responsive bootstrap 4 admin template" name="description" />
    <meta content="Coderthemes" name="author" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css">

</head>

<body>
    
    <!-- Begin page -->
    <div id="wrapper" style="background-color: #F7F7F7; ">
        <!-- LOGO -->

        <div class="logo-box mt-2 m-0 ml-0">
            <a href="Count" class="">

                <img src="/images/snImg.jpg" style="display: block; margin-left: auto; margin-right: auto; width: 50px;height:50px;">

            </a>
        </div>
        <!-- Topbar Start -->
        <div class="navbar-custom">
            <ul class="list-unstyled topnav-menu float-right mb-0">
                <li class="dropdown notification-list">
                    <a class="nav-link dropdown-toggle nav-user mr-0" data-toggle="dropdown" href="#" role="button" aria-haspopup="false" aria-expanded="false">
                        <img src="/images/images.png" alt="user-image" class="rounded-circle" />
                        <span class="pro-user-name ml-1"> <i class="mdi mdi-chevron-down"></i> @userName</span>
                    </a>
                    <div class="dropdown-menu dropdown-menu-right profile-dropdown">
                        <!-- item-->
                        <a href="javascript:void(0);" class="dropdown-item notify-item">
                            <i class="mdi mdi-logout-variant"></i>
                            <span @onclick="Logout">Logout</span>
                        </a>
                    </div>
                </li>
            </ul>

            <ul class="list-unstyled topnav-menu topnav-menu-left m-0">
                <li>
                    <button class="button-menu-mobile">
                        <i class="mdi mdi-menu"></i>
                    </button>
                </li>
            </ul>
        </div>
        <!-- end Topbar -->
        <!-- Left Sidebar Start  -->
        <div class="left-side-menu">
            <div class="user-box">
                <div class="float-left">
                    <img src="/images/images.png" alt="" class="avatar-md rounded-circle" />
                </div>
                <div class="user-info">
                    <a href="#">@userName</a>
                </div>
            </div>

            <!--- Sidemenu -->
            <div id="sidebar-menu">
                <ul class="metismenu" id="side-menu">
                    <li class="menu-title">Navigation</li>
                    <li>
                        <a href="https://dashboard.shikkhanobish.com/index.html">
                            <i class="fas fa-home"></i>
                            <span> Dashboard </span>
                        </a>
                    </li>
                    <li>
                        <a href="Count">
                            <i class="fas fa-calculator"></i>
                            <span> Count </span>
                        </a>
                    </li>
                    <li>
                        <a href="Questions">
                            <i class="far fa-question-circle"></i>
                            <span> Question </span>
                        </a>
                    </li>
                    <li>
                        <a href="TeacherApproval">
                            <i class="fas fa-user-alt"></i>
                            <span> Teacher Qn. Approval </span>
                        </a>
                    </li>
                    <li>
                        <a href="ActiveTeacher">
                            <i class="fas fa-lightbulb"></i>
                            <span> Active Teacher </span>
                        </a>
                    </li>
                    <li>
                        <a href="TeacherWithdraw">
                            <i class="fas fa-money-bill-wave-alt"></i>
                            <span> Teacher Withdraw </span>
                        </a>
                    </li>
                    <li>
                        <a href="SendMessage">
                            <i class="far fa-share-square"></i>
                            <span> Send Message </span>
                        </a>
                    </li>
                    <li>
                        <a href="RndNumGenerator">
                            <i class="fas fa-pen-nib"></i>
                            <span> Data Operator </span>
                        </a>
                    </li>
                    <li>
                        <a href="ApiCodeGenaretor">
                            <i class="fas fa-code"></i>
                            <span> Code Genaretor</span>
                        </a>
                    </li>

                </ul>

            </div>
            <!-- End Sidebar -->

            <div class="clearfix"></div>
        </div>
        <!-- Left Sidebar End -->
        <!-- ============================================================== -->
        <!-- Start Page Content here -->
        <!-- ============================================================== -->

        <div class="content-page">

            <div class="content">

                <div class="card">
                    <div class="card-body">
                        <label style="font-size:30px;" class="card-title">Add New Operator</label>
                        <div class="form-group row">
                            <div class="col-3">
                                <input class="form-control " placeholder="Name" @bind="addName" />
                            </div>
                            <div class="col-3">
                                <input class="form-control" placeholder="Phone Number" @bind="addNumber" />
                            </div>

                            <div class="col-3">
                                <button class="btn btn-outline-success" @onclick="addNewOperator">Add</button>
                            </div>

                            
                        </div>
                    </div>


                </div>

                <div class="card">
                    <div class="card-body">
                        <label style="font-size:30px;" class="card-title">Operators</label>
                        <div class="table-responsive">
                            <table class="table align-middle">
                                <thead>
                                    <tr>
                                        <th scope="col">Operator ID</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Phone Number</th>
                                        <th scope="col">Work Link</th>
                                        <th scope="col">Remove</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in shiEMList)
                                    {
                                        <tr>
                                            <th scope="row">@item.employeeID</th>
                                            <td>@item.name</td>
                                            <td>@item.phonenumber</td>
                                            <td>http://makequestion.shikkhanobish.com/@item.employeeID</td>
                                            <td>
                                                <button type="button" class="btn btn-danger btn-sm px-3" @onclick="@( async () => await RemoveOperator(item.employeeID))">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </td>
                                        </tr>



                                    }
                                </tbody>
                            </table>

                        </div>
                    </div>

                </div>
                <div class="card ">
                    <div class="card-body">
                        <label style="font-size:30px;" class="card-title">Assign Task  </label>
                        <table style="text-align:center; ">
                            <thead style="color: black; font-weight: bold;font-size:12px;">
                                <tr>
                                    <th>Operator Name</th>
                                    <th>Class Name</th>
                                    <th>Subject Name</th>
                                    <th>Chapter Name</th>
                                    <th>Total MCQ</th>
                                    <th>Done Number</th>

                                </tr>
                            </thead>
                            <tbody style="font-size: 12px; ">
                                <tr>
                                    <td>
                                        <select class="form-control btn btn-purple" style="" id="class" @onchange="SelectedOperator">
                                            <option class="">Select Operator</option>
                                            @foreach (var item in operatorListSelect)
                                            {

                                                <option value="@item">@item</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <select class="form-control btn btn-purple" id="class" @onchange="SelectedClass">
                                            <option>Select Class</option>
                                            @foreach (var item in classList)
                                            {

                                                <option value="@item">@item</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <select class="form-control btn btn-purple" id="class" @onchange="SelectedSubject">
                                            <option>Select Subject</option>
                                            @foreach (var item in subjectList)
                                            {

                                                <option value="@item">@item</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <select class="form-control btn btn-purple" id="class" @onchange="SelectedChapter">
                                            <option>Select Chapter</option>
                                            @foreach (var item in chapterList)
                                            {

                                                <option value="@item">@item</option>
                                            }
                                        </select>
                                    </td>

                                    <td style="width: 150px">
                                        <b>@totalChapQues</b>
                                    </td>
                                    <td style="width: 150px">
                                        <b>@doneNum</b>

                                    </td>
                                </tr>

                            </tbody>


                        </table>

                        <br />
                        <b>Pdf Link: @Link</b>
                    </div>
                    <div class="card-body">
                        
                        <div class="form-group row">
                            <div class="col-4">
                                <input class="form-control" placeholder="Staring Number" @bind="Staringnum" />
                            </div>
                            <div class="col-4">
                                <input class="form-control" placeholder="Ending Number" @onchange="@onChange" />
                            </div>
                            <div class="col-4">
                                <button class="btn btn-primary" type="button" @onclick="assignTask">

                                    @BtnString
                                </button>
                            </div>

                        </div>



                    </div>



                </div>
                <!-- Start container-fluid -->
                <div class="container-fluid">
                    <div class="card ">
                        <div class="card-body">
                            <label style="font-size:30px;" class="card-title">Add Chaper PDF Link  </label>
                            <div class="form-group row">
                                <div class="col-4">
                                    <input class="form-control" placeholder="Chapter ID" @bind="chapterID" />
                                </div>
                                <div class="col-4">
                                    <input class="form-control" placeholder="Total Number of Question" @bind="totalQSInChpater" />
                                </div>

                                <div class="col-4">
                                    <input class="form-control" placeholder="Link" @bind="Link" />
                                </div>
                            </div>

                            <button class="btn btn-success" @onclick="addChapter"> @addbtnTxt</button>
                            <div class="Card">
                                <div class="card-body">
                                    <div class="card-title">
                                        PDF Table
                                    </div>
                                    <div style="overflow: scroll; height: 400px;">
                                        <table class="table table-bordered" style="text-align: center;">
                                            <thead style="color: black; font-weight: bold;font-size:10px;">
                                                <tr>
                                                    <th>Class</th>
                                                    <th>Subject</th>
                                                    <th>Chapter</th>
                                                    <th>ChapterID</th>
                                                    <th>PDF Link</th>
                                                    <th>No Of Qs</th>
                                                    <th>IsDone</th>
                                                    <th>Done Number</th>
                                                    <th>Delete</th>
                                                </tr>
                                            </thead>
                                            <tbody style="font-size: 10px; ">
                                                @foreach (var item in allPDFLink)
                                                {
                                                <tr>
                                                    <td style="color: #2E2E2E">@item.className</td>
                                                    <td style="color: #2E2E2E">@item.subjectName</td>
                                                    <td style="color: #2E2E2E">@item.chapterName</td>
                                                    <td style="color: #2E2E2E">@item.chapterID</td>
                                                    <td style="color: #2E2E2E; width: 150px">@item.link</td>
                                                    <td style="color: #2E2E2E">@item.noOfQues</td>
                                                    <td style="color: #2E2E2E">@item.isDone</td>
                                                    <td style="color: #2E2E2E">@item.doneNum</td>
                                                    <td style="color: #2E2E2E"><button class="btn btn-danger" @onclick="@( async () => await RemovePDFLink(item.chapterID))"> Delete</button></td>



                                                </tr>

                                                }

                                            </tbody>


                                        </table>
                                    </div>
                                   
                                </div>

                            </div>
                        </div>                      
                    </div>
                   


                    <div class="card">
                        <div class="card-body">
                            <label style="color:blueviolet;font-size:30px;" class="card-title">Task  History</label>
                            <div class="table-responsive" style="overflow: scroll; height: 600px;">
                                <table id="" class="table table-bordered" style="text-align:center; ">
                                    <thead style="color: black; font-weight: bold;font-size:10px;">
                                        <tr>
                                            <th>Operator ID</th>
                                            <th>Name</th>
                                            <th>Assigned Number</th>
                                            <th>Chapter ID</th>
                                            <th>Chapter Name</th>
                                            <th>Task Date</th>
                                            <th>Assign Time (DD/MM/YYYY)</th>
                      
                                            <th>Submitted</th>
                                            <th>Remaining</th>
                                            <th>IS Task Submitted</th>
                                            <th>Status</th>
                                            <th>Delete Task</th>

                                        </tr>
                                    </thead>
                                    <tbody style="font-size: 10px; ">
                                        @foreach (var item in showInfo)
                                        {
                                            <tr>
                                                <td style="color: #2E2E2E">@item.userID</td>
                                                <td style="color: #2E2E2E">@item.userName</td>
                                                <td style="color: #2E2E2E">@item.MCQNumbers</td>
                                                <td style="color: #2E2E2E">@item.chapterID</td>
                                                <td style="color: #2E2E2E">@item.chapterName</td>
                                                <td style="color: #2E2E2E">@item.date</td>
                                                <td style="color: #2E2E2E">@item.startTime</td>
                       
                                                <td style="color: green" >@item.submitted</td>
                                                <td style="color: red">@item.reMain</td>
                                                <td style="color: @item.isTaskSubColor; font-weight: bold"> <i class="fas fa-times" style="display:@item.isTaskSubNootDone"></i>
                                                                                                            <i class="fas fa-check-double" style="display:@item.isTaskSubDone"></i>
                                                                                                            <i style="display:@item.isTaskSubPending">---</i></td>
                                                <td style="color: @item.statusColor; font-weight: bold">@item.status</td>
                                                <td>
                                                    <button type="button" class="btn btn-danger btn-sm px-3" @onclick="@( async () => await RemoveTask(item.taskID))">
                                                        <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true" style="display:@showLoadingRemoveTask"></span>
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </td>


                                            </tr>

                                        }

                                    </tbody>


                                </table>
                            </div>
                        </div>

                    </div>

                </div>

                <!-- end container-fluid -->
                <!-- Footer Start -->
                <footer class="footer">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-12">
                                2021 &copy; shikkhanobish
                            </div>
                        </div>
                    </div>
                </footer>
                <!-- end Footer -->
            </div>
            <!-- end content -->

        </div>

        <!-- END content-page -->

    </div>
    <!-- END wrapper -->
    <!-- Vendor js -->
</body>
</html>


@code{

    public string userName { get; set; }
    public string pass { get; set; }
    string ID { get; set; }
    string chapterID { get; set; }
    string totalQSInChpater { get; set; }
    string addbtnTxt { get; set; }
    string totalChapQues;
    int limit1;
    int limit;
    int selecteOPID;
    string Link;
    string makeTaskDisOrEn;
    int SelectedChapterID;
    string BtnString;
    string addName;
    string addNumber;
    List<QuestionPdfLink> allPDFLink = new List<QuestionPdfLink>();
    string showLoading;
    string selectedChapterName;
    string showLoadingRemoveTask;
    string selectedMCQList;
    List<string> classList = new List<string>();
    List<string> operatorListSelect = new List<string>();
    List<string> subjectList = new List<string>();
    List<string> chapterList = new List<string>();
    List<dataentryOperatorTask> showInfo = new List<dataentryOperatorTask>();
    List<dataentryOperatorTask> LiveshowInfo = new List<dataentryOperatorTask>();
    List<Chapter> allc = new List<Chapter>();
    List<Subject> allsub = new List<Subject>();
    List<ClassInfo> allClass = new List<ClassInfo>();
    List<Teachers> teacherList = new List<Teachers>();
    List<shiEmployee> shiEMList = new List<shiEmployee>();
    List<dataentryOperatorTask> operatorList = new List<dataentryOperatorTask>();
    List<int> numList = new List<int>();
    int doneNum;
    List<Question> quesList = new List<Question>();
    CultureInfo culturen = new CultureInfo("en-US");
    protected override async Task OnInitializedAsync()
    {
        makeTaskDisOrEn = "true";
        MakeQSTxt = "Make Task";
        addbtnTxt = "Add";
        showLoadingRemoveTask = "None";
        showLoading = "None";
        BtnString = "Assign Task";
        userName = StaticClassToPassData.thisAdmin.name;
        pass = StaticClassToPassData.thisAdmin.passWord;

        await GetOperatorInfo();
        //await AutomatedTaskAssigner(1000005);

    }
    private void operatorChanged(ChangeEventArgs opevent)
    {
        string thisopID = opevent.Value.ToString();
        for(int i = 0; i < showInfo.Count; i++)
        {
            if(showInfo[i].userID == int.Parse(thisopID) && showInfo[i].status == "Active")
            {
                lastTaskEndTime = showInfo[i].endTime;
                seletedTaskOpName = showInfo[i].userName;
                var lastActiveTime = DateTime.ParseExact(showInfo[i].endTime, "dd/MM/yyyy hh:mm tt", culturen);
                var thisTime = DateTime.Now;
                if (lastActiveTime < thisTime)
                {
                    makeTaskDisOrEn = "true";
                    canMakenewTask = true;
                    selectedTaskOpID = int.Parse(thisopID);
                }
                else
                {
                    makeTaskDisOrEn = "false";
                    selectedTaskOpID = 0;
                    canMakenewTask = false;
                }
            }
        }
        if(selectedTaskOpID == 0 && canMakenewTask == false)
        {
            selectedTaskOpID = int.Parse(thisopID);
            canMakenewTask = true;
        }
    }
    public async Task addChapter()
    {
        addbtnTxt = "Please Wait...";
        var res = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/setQuestionPdfLink".PostJsonAsync(new
        {
            chapterID = chapterID,
            link = Link,
            noOfQues = totalQSInChpater
        }).
       ReceiveJson<Response>();
        addbtnTxt = "Add";
        chapterID = "";
        Link = "";
        totalQSInChpater = "";
    }
    public async Task RemovePDFLink(int chapterID)
    {
        var res = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/deleteQuestionPdfLink".PostJsonAsync(new
        {
            chapterID = chapterID
        }).
            ReceiveJson<Response>();
        await RefreshPDFLink();
    }
    public async Task RefreshPDFLink()
    {
        allPDFLink = new List<QuestionPdfLink>();
        var thispdfLink = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getQuestionPdfLink".GetJsonAsync<List<QuestionPdfLink>>();
        for (int i = 0; i < thispdfLink.Count; i++)
        {
            for (int j = 0; j < allc.Count; j++)
            {

                if (allc[j].chapterID == thispdfLink[i].chapterID)
                {
                    thispdfLink[i].chapterName = allc[j].name;
                    for (int a = 0; a < selectedChapter.Count; a++)
                    {
                        if (selectedChapter[a].chapterID == thispdfLink[i].chapterID)
                        {
                            if (thispdfLink[i].noOfQues - selectedChapter[a].approvedQS <= 150)
                            {
                                thispdfLink[i].isDone = "Done";
                            }
                            else
                            {
                                thispdfLink[i].isDone = "Not Done";
                            }
                            thispdfLink[i].doneNum = selectedChapter[a].approvedQS;
                            thispdfLink[i].remaining = thispdfLink[i].noOfQues - thispdfLink[i].doneNum;
                        }
                    }
                    for (int k = 0; k < allsub.Count; k++)
                    {
                        if (allc[j].subjectID == allsub[k].subjectID)
                        {
                            thispdfLink[i].subjectName = allsub[k].name;
                            for (int l = 0; l < allClass.Count; l++)
                            {
                                if (allClass[l].classID == allsub[k].classID)
                                {
                                    thispdfLink[i].className = allClass[l].name;
                                }
                            }
                        }
                    }
                }
            }
        }
        List<QuestionPdfLink> SortedList = new List<QuestionPdfLink>();
        SortedList = thispdfLink.OrderBy(x => x.remaining).ToList();
        thispdfLink = SortedList;
        thispdfLink.Reverse();
        allPDFLink = thispdfLink;
    }
    public async Task addNewOperator()
    {

        Random rd = new Random();
        shiEmployee ne = new shiEmployee();
        ne.name = addName;
        ne.phonenumber = addNumber;
        ne.employeeID = rd.Next(100000,999999);
        ne.employeeType = 1;
        var res = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/setshiEmployee".PostJsonAsync(new {
            name = ne.name,
            phonenumber = ne.phonenumber,
            employeeID = ne.employeeID,
            employeeType = ne.employeeType}).
            ReceiveJson<Response>();
        await getOpe();
    }
    public async Task RemoveOperator(int opID)
    {
        var res = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/deleteShiEmployee".PostJsonAsync(new
        {
            employeeID = opID
        }).
            ReceiveJson<Response>();
        await getOpe();
    }

    private void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string thisNum = (string)args.Value;
        if(thisNum != null)
        {
            limit = int.Parse(thisNum);
        }

        CopyNum();
    }
    public void RefreshList()
    {
        totalChapQues = "";
        selecteOPID = 0;
        Link = "";
        limit = 0;
        SelectedChapterID = 0;
        selectedChapterName = "";
        selectedMCQList = "";
        classList = new List<string>();
        operatorListSelect = new List<string>();
        subjectList = new List<string>();
        chapterList = new List<string>();
        showInfo = new List<dataentryOperatorTask>();
        LiveshowInfo = new List<dataentryOperatorTask>();
        allc = new List<Chapter>();
        allsub = new List<Subject>();
        allClass = new List<ClassInfo>();
        teacherList = new List<Teachers>();
    }
    public async Task RemoveTask(string taskID)
    {
        showLoadingRemoveTask = "Block";
        var res = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/deleteTask".PostJsonAsync(new
        {
            taskID = taskID
        }).
       ReceiveJson<Response>();
        await GetOperatorInfo();
        showLoadingRemoveTask = "None";
    }
    public async Task getOpe()
    {
        operatorListSelect = new List<string>();
        teacherList = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/getAllTeacher".PostJsonAsync(new { }).ReceiveJson<List<Teachers>>();
        shiEMList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getshiEmployee".GetJsonAsync<List<shiEmployee>>();
        for (int z = 0; z < teacherList.Count; z++)
        {
            for (int k = 0; k < shiEMList.Count; k++)
            {
                if (shiEMList[k].employeeID == teacherList[z].teacherID)
                {
                    operatorListSelect.Add(teacherList[z].name);
                }
            }

        }
    }
    public async Task GetOperatorInfo()
    {
        await getOpe();
        allc = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getChapter".GetJsonAsync<List<Chapter>>();
        allsub = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getSubject".GetJsonAsync<List<Subject>>();
        allClass = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getClassInfo".GetJsonAsync<List<ClassInfo>>();
        operatorList = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/getdataentryOperatorTask".PostJsonAsync(new { }).ReceiveJson<List<dataentryOperatorTask>>();
        var thList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getTeacherQuestionHistory".GetJsonAsync<List<TecaherQuestionHistory>>();
        quesList = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getQuestion".GetJsonAsync<List<Question>>();
        List<dataentryOperatorTask> thisOpList = new List<dataentryOperatorTask>();
        List<dataentryOperatorTask> LivethisOpList = new List<dataentryOperatorTask>();
        GetALlChapter();
        await RefreshPDFLink();

        for (int t = 0; t < allClass.Count; t++)
        {
            classList.Add(allClass[t].name) ;
        }

        CultureInfo culturen = new CultureInfo("en-US");
        thisOpList = operatorList;
        List<string> activeTaskList = new List<string>();
        List<int> doneOP = new List<int>();
        List<dataentryOperatorTask> thisopTask = new List<dataentryOperatorTask>();
        for (int i = 0; i < thisOpList.Count; i++)
        {
            thisOpList[i] = operatorList[i];
            for (int z = 0; z < teacherList.Count; z++)
            {
                if (thisOpList[i].userID == teacherList[z].teacherID)
                {
                    thisOpList[i].userName = teacherList[z].name;
                    break;
                }
            }
            for (int e = 0; e < allc.Count; e++)
            {
                if (allc[e].chapterID == thisOpList[i].chapterID)
                {
                    thisOpList[i].chapterName = allc[e].name;
                    break;
                }
            }
            //indivisual TAsk
            thisopTask = new List<dataentryOperatorTask>();
            bool shouldCheck = true;
            for(int j = 0; j < doneOP.Count; j++)
            {
                if (doneOP[j] == thisOpList[i].userID)
                {
                    shouldCheck = false ;
                }
            }

            if (shouldCheck)
            {
                doneOP.Add(thisOpList[i].userID);
                for (int k = 0; k < thisOpList.Count; k++)
                {
                    if(thisOpList[i].userID == thisOpList[k].userID)
                    {
                        thisopTask.Add(thisOpList[k]);
                    }
                }


                ////// Active Define
                var lastActive = DateTime.ParseExact(thisopTask[0].startTime, "MM/dd/yyyy hh:mm tt", culturen);
                int indexID = 0;
                for (int l = 0; l < thisopTask.Count; l++)
                {
                    var thisDatetime = DateTime.ParseExact(thisopTask[l].startTime, "MM/dd/yyyy hh:mm tt", culturen);
                    if(lastActive < thisDatetime)
                    {
                        indexID = l;
                        lastActive = thisDatetime;
                    }
                }
                activeTaskList.Add(thisopTask[indexID].taskID);
            }

        }
        for (int l = 0; l < operatorList.Count; l++)
        {
            List<int> listofTHisOPQuestionID = new List<int>();
            for (int k = 0; k < quesList.Count; k++)
            {
                if (operatorList[l].chapterID == quesList[k].chapterID)
                {
                    listofTHisOPQuestionID.Add(quesList[k].questionID);
                }
            }
            CultureInfo culture = new CultureInfo("en-US");
            DateTime TaskDateFormatSt = DateTime.ParseExact(operatorList[l].startTime, "MM/dd/yyyy hh:mm tt", culture);
            for (int p = 0; p < thList.Count; p++)
            {
                for (int o = 0; o < listofTHisOPQuestionID.Count; o++)
                {
                    if (listofTHisOPQuestionID[o] == thList[p].questionID)
                    {
                        DateTime HistoryDateFormat = DateTime.ParseExact(thList[p].review, "dd'-'MM'-'yyyy' 'HH':'mm':'ss", culture);
                        if (HistoryDateFormat >= TaskDateFormatSt)
                        {
                            thisOpList[l].submitted++;

                        }
                    }

                }

            }


        }
        for (int i = 0; i < thisOpList.Count; i++)
        {

            if (thisOpList[i].submitted > 100)
            {
                thisOpList[i].reMain = 0;
            }
            else
            {
                thisOpList[i].reMain = 100 - thisOpList[i].submitted ;
            }
            thisOpList[i].statusColor = "#979797";
            if (thisOpList[i].submitted >= 100)
            {
                thisOpList[i].isTaskSubDone = "Block";
                thisOpList[i].isTaskSubPending = "None";
                thisOpList[i].isTaskSubNootDone = "None";
                thisOpList[i].isTaskSubColor = "#08B483";
            }
            else
            {
                thisOpList[i].isTaskSubNootDone = "Block";
                thisOpList[i].isTaskSubDone = "None";
                thisOpList[i].isTaskSubPending = "None";
                thisOpList[i].isTaskSubColor = "#CE0C0C";
            }
            thisOpList[i].status = "Inactive";
            ////
            for (int j = 0; j < activeTaskList.Count; j++)
            {
                if (activeTaskList[j] == thisOpList[i].taskID)
                {
                    thisOpList[i].statusColor = "#541BD7";
                    thisOpList[i].isTaskSubPending = "Block";
                    thisOpList[i].isTaskSubDone = "None";
                    thisOpList[i].isTaskSubNootDone = "None";
                    thisOpList[i].isTaskSubColor = "#BFB10C";
                    thisOpList[i].status = "Active";
                }
            }
            ///
            var nt = DateTime.ParseExact(thisOpList[i].startTime, "MM/dd/yyyy hh:mm tt", culturen);
            thisOpList[i].startTime = nt.ToString("dd/MM/yyyy hh:mm tt");
            nt = DateTime.ParseExact(thisOpList[i].endTime, "MM/dd/yyyy hh:mm tt", culturen);
            thisOpList[i].endTime = nt.ToString("dd/MM/yyyy hh:mm tt");
            thisOpList[i].MCQNumbers = thisOpList[i].MCQNumbers?[0..Math.Min(thisOpList[i].MCQNumbers.Length, 50)];
        }
        List<dataentryOperatorTask> SortedList = new List<dataentryOperatorTask>();
        SortedList = thisOpList.OrderBy(x => x.status).ToList();
        thisOpList = SortedList;
        showInfo = thisOpList;
    }



    private void SelectedOperator(ChangeEventArgs dateEvent)
    {
        for (int i = 0; i < teacherList.Count; i++)
        {
            if (teacherList[i].name == dateEvent.Value.ToString())
            {
                for(int j = 0; j < shiEMList.Count; j++)
                {
                    if(shiEMList[j].employeeID == teacherList[i].teacherID)
                    {
                        selecteOPID = teacherList[i].teacherID;
                        break;
                    }
                }


            }

        }
    }
    private void SelectedChapter(ChangeEventArgs dateEvent)
    {
        for(int i = 0; i < allc.Count; i++)
        {
            string cchp = "";
            foreach (var ch in dateEvent.Value.ToString())
            {
                if (ch == '-')
                {
                    break;
                }
                else
                {
                    cchp += ch;
                }
            }
            if (allc[i].name == cchp)
            {

                selectedChapterName = cchp;
                SelectedChapterID = allc[i].chapterID;
                break;
            }
        }
        for(int i = 0; i < allPDFLink.Count; i++)
        {
            if(SelectedChapterID == allPDFLink[i].chapterID)
            {
                doneNum = allPDFLink[i].doneNum;
                Link = allPDFLink[i].link;
                totalChapQues = allPDFLink[i].noOfQues.ToString();
            }
        }

    }
    private void SelectedClass(ChangeEventArgs dateEvent)
    {
        string thisClsName = dateEvent.Value.ToString();
        subjectList = new List<string>();
        List<string> thissub = new List<string>();
        for (int i = 0; i < allClass.Count; i++)
        {
            if (allClass[i].name == thisClsName)
            {
                for (int j = 0; j < allsub.Count; j++)
                {
                    if (allsub[j].classID == allClass[i].classID)
                    {
                        thissub.Add(allsub[j].name + "-" + allsub[j].subjectID);
                    }
                }

            }
        }

        subjectList = thissub;
    }
    private void SelectedSubject(ChangeEventArgs dateEvent)
    {
        string thisSubName = dateEvent.Value.ToString();
        string cleanSub = "";
        foreach(var ch in thisSubName)
        {
            if (ch == '-')
            {
                break;
            }
            else
            {
                cleanSub += ch;
            }
        }
        thisSubName = cleanSub;

        chapterList = new List<string>();
        List<string> thisch = new List<string>();


        for (int i = 0; i < allsub.Count; i++)
        {
            if(allsub[i].name == thisSubName)
            {
                for (int j = 0; j < allc.Count; j++)
                {
                    if (allc[j].subjectID == allsub[i].subjectID)
                    {
                        thisch.Add(allc[j].name + "-" + allc[j].chapterID);
                    }
                }

            }
        }
        chapterList = thisch;
    }
    [Inject]
    public NavigationManager nvi { get; set; }

    public async Task Logout()
    {
        await oLocalStore.ClearAsync();
        string redirectURL = "/";
        nvi.NavigateTo(redirectURL);
    }
    public void CopyNum()
    {
        selectedMCQList = "";
        numList = new List<int>();
        Random rn = new Random();

        List<int> list = new List<int>();

        int totalChQNum = limit - Staringnum;
        if (totalChQNum <= 160)
        {
            for (int i = Staringnum; i <= limit; i++)
            {
                list.Add(i);
            }
            numList = list;
        }
        else
        {
            int reqNum = Convert.ToInt32(150);
            while (list.Count <= reqNum)
            {
                int thisNum = rn.Next(Staringnum, limit);
                bool match = false;
                for (int j = 0; j < list.Count; j++)
                {
                    if (list[j] == thisNum)
                    {
                        match = true;
                        break;
                    }
                }
                if (!match)
                {
                    list.Add(thisNum);
                }
            }
            numList = list;
        }



        List<int> SortedList = new List<int>();
        SortedList = numList.OrderBy(x => x).ToList();
        numList = SortedList;
        for (int i = 0; i < numList.Count; i++)
        {
            if (i == numList.Count - 1)
            {
                selectedMCQList = selectedMCQList + numList[i];
            }
            else
            {
                selectedMCQList = selectedMCQList + numList[i] + " , ";
            }

        }
    }
    public async Task assignTask()
    {
        showLoading = "Block";
        if (selecteOPID != 0 && selectedMCQList != "" && selectedMCQList != null && Link != "" || Link != null && SelectedChapterID != 0)
        {
            BtnString = "Connecting with server...";
            Random random = new Random();
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            var id = RandomString(50);
            string sd = DateTime.Now.ToString("MM/dd/yyyy hh:mm tt");
            string ed = DateTime.Now.AddDays(1).ToString("MM/dd/yyyy hh:mm tt");
            string thisd = DateTime.Now.ToString("dddd, dd MMMM yyyy");

            var res1 = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/setdataentryOperatorTask".PostUrlEncodedAsync(new
            {
                userID = selecteOPID,
                MCQNumbers = selectedMCQList + " Link#" + Link,
                date = thisd,
                chapterID = SelectedChapterID,
                taskID = id,
                startTime = sd,
                endTime = ed
            })
    .ReceiveJson<Response>();
            RefreshList();
            await GetOperatorInfo();
            BtnString = "Done!";
            await Task.Delay(3000);
            BtnString = "Assign Task";
        }
        else
        {
            BtnString = "Please fill up every info";
            await Task.Delay(3000);
            BtnString = "Assign Task";
        }
        showLoading = "None";
    }
    private  Random random = new Random();
    public string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    List<Chapter> selectedChapter = new List<Chapter>();
    public void GetALlChapter()
    {

        for (int i = 0; i < allc.Count; i++)
        {

            for (int j = 0; j < quesList.Count; j++)
            {
                if (quesList[j].chapterID == allc[i].chapterID)
                {

                    if (quesList[j].review == 1)
                    {
                        allc[i].approvedQS++;
                    }
                }
            }

            selectedChapter.Add(allc[i]);
        }
    }
    public int Staringnum = 0;
    public int EndingNum = 0;
    public async Task<QuestionPdfLink> getNewChapterToAssign()
    {
        QuestionPdfLink chapter = new QuestionPdfLink();
        var allPdfLink = await "https://api.shikkhanobish.com/api/ShikkhanobishLogin/getQuestionPdfLink".GetJsonAsync<List<QuestionPdfLink>>();

        for (int i = 0; i < selectedChapter.Count; i++)
        {
            if (selectedChapter[i].approvedQS < 20)
            {
                for (int j = 0; j < allPdfLink.Count; j++)
                {

                    if (selectedChapter[i].chapterID == allPdfLink[j].chapterID)
                    {
                        bool isAssigned = false;
                        for (int k = 0; k < operatorList.Count; k++)
                        {
                            if (selectedChapter[i].chapterID == operatorList[k].chapterID  && operatorList[k].status!= "Active")
                            {
                                for(int l = 0; l < allPDFLink.Count; l++)
                                {
                                    if(allPdfLink[j].chapterID == allPDFLink[l].chapterID)
                                    {
                                        Staringnum = ((allPDFLink[l].doneNum / 130)) * 200;
                                        if(Staringnum + 200 > allPdfLink[j].noOfQues)
                                        {
                                            EndingNum = allPdfLink[j].noOfQues;
                                        }
                                        else
                                        {
                                            EndingNum = Staringnum + 200;
                                        }
                                    }
                                }
                                isAssigned = true;
                            }
                        }
                        if (isAssigned)
                        {
                            break;
                        }
                        for (int k = 0; k < allsub.Count; k++)
                        {
                            if (selectedChapter[i].subjectID == allsub[k].subjectID)
                            {
                                if (allsub[k].groupName == "Science" || allsub[k].groupName == "Com" && allsub[k].subjectID == selectedChapter[i].subjectID)
                                {

                                    return allPdfLink[j];
                                }
                            }
                        }


                    }


                }
            }


        }


        return chapter;

    }
    bool canMakenewTask;
    string MakeQSTxt;
    string makeTaskError;
    string lastTaskEndTime;
    int selectedTaskOpID;
    string seletedTaskOpName;
    public async Task AutomatedTaskAssigner()
    {

        if (canMakenewTask)
        {
            MakeQSTxt = "Making New Task. Please Wait...";
            GetALlChapter();
            QuestionPdfLink thisSelectedChapterToAsign = await getNewChapterToAssign();
            CopyNumNewTask(thisSelectedChapterToAsign.noOfQues);
            var id = RandomString(50);
            string sd = DateTime.Now.ToString("MM/dd/yyyy hh:mm tt");
            string ed = DateTime.Now.AddDays(1).ToString("MM/dd/yyyy hh:mm tt");
            string thisd = DateTime.Now.ToString("dddd, dd MMMM yyyy");
            var res1 = await "https://api.shikkhanobish.com/api/ShikkhanobishTeacher/setdataentryOperatorTask".PostUrlEncodedAsync(new
            {
                userID = selectedTaskOpID,
                MCQNumbers = selectedMCQList + " Link#" + thisSelectedChapterToAsign.link,
                date = thisd,
                chapterID = thisSelectedChapterToAsign.chapterID,
                taskID = id,
                startTime = sd,
                endTime = ed
            })
    .ReceiveJson<Response>();

            RefreshList();
            await GetOperatorInfo();
            MakeQSTxt = "Done";
            await Task.Delay(1000);
            MakeQSTxt = "Make New Task";
        }
        else
        {
            makeTaskError = "You can make new task for "+ seletedTaskOpName+" after(MM/DD/YY) : " + lastTaskEndTime;
        }

    }
    public void CopyNumNewTask(int totalChapQues)
    {
        selectedMCQList = "";
        numList = new List<int>();
        Random rn = new Random();

        List<int> list = new List<int>();
        int num = 0;
        int totalChQNum = Convert.ToInt32(totalChapQues);
        if (totalChQNum <= 160)
        {
            num = totalChQNum;
            for (int i = 0; i < num; i++)
            {
                if (i == 150)
                {
                    break;
                }
                list.Add(i + 1);
            }
            numList = list;
        }
        else
        {
            num = 150;
            int reqNum = Convert.ToInt32(150);
            while (list.Count <= reqNum)
            {
                int thisNum = rn.Next(1, totalChQNum);
                bool match = false;
                for (int j = 0; j < list.Count; j++)
                {
                    if (list[j] == thisNum)
                    {
                        match = true;
                        break;
                    }
                }
                if (!match)
                {
                    list.Add(thisNum);
                }
            }
            numList = list;
        }



        List<int> SortedList = new List<int>();
        SortedList = numList.OrderBy(x => x).ToList();
        numList = SortedList;
        for (int i = 0; i < numList.Count; i++)
        {
            if (i == numList.Count - 1)
            {
                selectedMCQList = selectedMCQList + numList[i];
            }
            else
            {
                selectedMCQList = selectedMCQList + numList[i] + " , ";
            }

        }
    }


}


















